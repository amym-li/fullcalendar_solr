<?php

/**
 * @file
 * FullCalendar Solr Views module help and theme functions.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Solarium\Core\Query\QueryInterface as SolariumQueryInterface;
use Drupal\search_api\Query\QueryInterface as DrupalQueryInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_theme().
 */
function fullcalendar_solr_theme($existing, $type, $theme, $path) {
  return [
    'views_view_fullcalendar_solr' => [
      'template' => 'views-view-fullcalendar-solr',
      'variables' => []
    ]
  ];
}

/**
 * Prepares variables for the FullCalendar style template
 * 
 * Default template: views-view-fullcalendar-solr.html.twig
 * 
 * @param array $vars
 *   An associative array containing:
 *   - view: A ViewExecutable object
 *   - rows: The raw row data
 *   - fullcalendar_options: FullCalendar presentation options
 */
function template_preprocess_views_view_fullcalendar_solr(array &$vars) {
  $view = $vars['view'];

  // Set unique id attribute for the fullcalendar instance.
  $id = Html::getId('fullcalendar_solr_' . $view->storage->id() . '_' . $view->current_display);
  $vars['attributes'] = new Attribute(['id' => $id]);

  // Load libraries.
  $vars['#attached']['library'][] = 'fullcalendar_solr/libraries.fullcalendar';
  $vars['#attached']['library'][] = 'fullcalendar_solr/fullcalendar_solr';

  $fullcalendar_options = $vars['options']['fullcalendar_options'];
  $fullcalendar_options['events'] = $vars['rows']['events'];
  
  $vars['#attached']['drupalSettings']['FullCalendarSolr'][] = [
    'options' => $fullcalendar_options,
    'years' => $vars['rows']['years'],
    'nav_link_day' => $vars['options']['nav_link_day'],
    'embed_id' => $id,
    'init' => FALSE,
  ];
}

// function fullcalendar_solr_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
//   if ($view->display->PluginID == 'theViewId') {
//     $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":node__field_airdate_date_field_airdate_date_value"];
//     // Unset the default date filtering.
//     unset($query->where[0]["conditions"][0]);
//     // Add custom date filtering.
//     $query->addWhere(0, 'node__field_myfield', $lowDateLimitWithTime, '>=');
//     $query->addWhere(0, 'node__field_myfield', $highDateLimitWithTime, '<');
//   }
// }